CC         = gcc
AR         = ar
LDLIBS	   = -lpthread -lm

GCCFLAGS   = -Wall -O3 -msse3 -ftree-vectorize -ftree-vectorizer-verbose=0 -finline-functions -lpthread -march=native -mtune=native -D_GNU_SOURCE -lm
SPARCFLAGS = -pipe -O3 -mtune=niagara2 -m32 -lrt -finline-functions -D_GNU_SOURCE
ICCFLAGS   = -static -gcc -Ofast -pthread -D_GNU_SOURCE

CFLAGS     = $(SPARCFLAGS)

ARGS       =

# define any directories containing header files other than /usr/include
INCLUDES   = -Iincludes

# define the output directory
BINDIR     = bin

LIBDIR     = lib

LIBNAME    = libsimsynch.a

# define the C source files
PRIMITIVES = $(wildcard primitives/*.c)
CONCURRENT = $(wildcard concurrent/*.c)
BENCHMARKS = $(wildcard benchmarks/*bench.c)
SRCS       = $(PRIMITIVES) $(CONCURRENT) 

# define the C object files 
OBJECTS    = $(SRCS:.c=.o)
OBJEXECS   = $(BENCHMARKS:.c=.o)

# define the .run executable files
EXECS      = $(BENCHMARKS:.c=.run)

.PHONY: all clean

all: $(EXECS) libbuild

libbuild: $(OBJECTS)
	$(AR) rcs $(LIBDIR)/$(LIBNAME) $(OBJECTS)

$(EXECS): %.run : %.o $(OBJECTS)
	$(CC) $(CFLAGS) $(ARGS) $(INCLUDES) $< -o $(BINDIR)/$(notdir $@) $(LDLIBS) $(OBJECTS)

.c.o:
	$(CC) $(CFLAGS) $(ARGS) $(INCLUDES) -c $< -o $@
    
clean: $(SRCS)
	rm -f $(OBJECTS) $(OBJEXECS) $(BINDIR)/*.run $(LIBDIR)/*.a res.txt *.log

